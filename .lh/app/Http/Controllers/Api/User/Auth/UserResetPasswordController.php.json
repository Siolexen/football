{
    "sourceFile": "app/Http/Controllers/Api/User/Auth/UserResetPasswordController.php",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1665566584309,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1665566589885,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,10 +2,10 @@\n \n namespace App\\Http\\Controllers\\Api\\User\\Auth;\n \n use App\\Http\\Controllers\\Api\\BaseController;\n-use App\\Http\\Requests\\v2\\User\\Auth\\ForgetPasswordRequest;\n-use App\\Http\\Requests\\v2\\User\\Auth\\ResetPasswordRequest;\n+use App\\Http\\Requests\\User\\Auth\\ForgetPasswordRequest;\n+use App\\Http\\Requests\\User\\Auth\\ResetPasswordRequest;\n use App\\Services\\User\\UserResetPasswordService;\n use Illuminate\\Support\\Facades\\Password;\n use Illuminate\\Validation\\ValidationException;\n \n"
                }
            ],
            "date": 1665566584309,
            "name": "Commit-0",
            "content": "<?php\n\nnamespace App\\Http\\Controllers\\Api\\User\\Auth;\n\nuse App\\Http\\Controllers\\Api\\BaseController;\nuse App\\Http\\Requests\\v2\\User\\Auth\\ForgetPasswordRequest;\nuse App\\Http\\Requests\\v2\\User\\Auth\\ResetPasswordRequest;\nuse App\\Services\\User\\UserResetPasswordService;\nuse Illuminate\\Support\\Facades\\Password;\nuse Illuminate\\Validation\\ValidationException;\n\nclass UserResetPasswordController extends BaseController\n{\n    public function forgotPassword(ForgetPasswordRequest $request, UserResetPasswordService $userResetPasswordService)\n    {\n        $status = $userResetPasswordService->forgotPassword($request);\n\n        if ($status == Password::RESET_LINK_SENT) {\n            return $this->sendResponse([\n                'status' => __($status)\n            ]);\n        }\n\n        throw ValidationException::withMessages([\n            'email' => [__($status)],\n        ]);\n    }\n\n    public function reset(ResetPasswordRequest $request, UserResetPasswordService $userResetPasswordService)\n    {\n        $status = $userResetPasswordService->resetPassword($request);\n\n        if ($status == Password::PASSWORD_RESET) {\n            return $this->sendResponse([\n                'message' => __('password.reset'),\n            ]);\n        }\n\n        return $this->sendError(__($status), 422);\n    }\n\n\n}"
        }
    ]
}