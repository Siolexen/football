{
    "sourceFile": "app/Http/Api/User/Login/UserLoginController.php",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 17,
            "patches": [
                {
                    "date": 1665561516464,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1665561772202,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -25,9 +25,9 @@\n      *\n      * @return Response\n      *\n      */\n-    public function login(LoginLoginRequest $request, UserLoginService $userLoginService, UserResourceService $userResourceService, UserVerifyService $userVerifyService)\n+    public function login(LoginRequest $request, UserLoginService $userLoginService, UserResourceService $userResourceService, UserVerifyService $userVerifyService)\n     {\n         $user = $userResourceService->getWithEmail($request->email);\n \n         if (!isset($request->password) && !isset($request->code)) {\n"
                },
                {
                    "date": 1665561777586,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,10 +4,9 @@\n \n use App\\Enums\\User\\CredentialType;\n use App\\Enums\\User\\LoginStatus;\n use App\\Http\\Controllers\\Api\\v2\\BaseController;\n-use App\\Http\\Requests\\User\\Login\\LoginRequest as LoginLoginRequest;\n-use App\\Http\\Requests\\v2\\User\\Login\\LoginRequest;\n+use App\\Http\\Requests\\User\\Login\\LoginRequest;\n use App\\Jobs\\User\\SendVerifyCode;\n use App\\Services\\User\\UserLoginService;\n use App\\Services\\User\\UserResourceService;\n use App\\Services\\User\\UserVerifyService;\n"
                },
                {
                    "date": 1665562056422,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -58,8 +58,7 @@\n         return $this->sendResponse([\n             'access_token' => $userLoginService->createToken($user),\n             'token_type' => 'Bearer',\n             'emailVerified' => $user->hasVerifiedEmail(),\n-            'status' => LoginStatus::Valid->value,\n         ]);\n     }\n }\n"
                },
                {
                    "date": 1665562066862,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -57,8 +57,7 @@\n \n         return $this->sendResponse([\n             'access_token' => $userLoginService->createToken($user),\n             'token_type' => 'Bearer',\n-            'emailVerified' => $user->hasVerifiedEmail(),\n         ]);\n     }\n }\n"
                },
                {
                    "date": 1665562072570,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -46,16 +46,8 @@\n         /* User not exist. Return invalid credentials. */\n         if (is_null($user))\n             return $this->sendError(__('login.invalid credentials'), 401);\n \n-        try {\n-            if (!$userVerifyService->verifyWithUserCredentials($request->validated(), $user)) {\n-                return $this->sendError(__('login.invalid credentials'), 401);\n-            }\n-        } catch (Exception $error) {\n-            return $this->sendError(__('login.invalid credentials'), 401);\n-        }\n-\n         return $this->sendResponse([\n             'access_token' => $userLoginService->createToken($user),\n             'token_type' => 'Bearer',\n         ]);\n"
                },
                {
                    "date": 1665562099313,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -38,13 +38,11 @@\n             /* Send Response with possible credentialTypes for user and with email. */\n             return $this->sendResponse([\n                 'credentialTypes' => $userResourceService->getCredentials($user),\n                 'email' => $request->email,\n-                'status' => LoginStatus::Verification->value,\n             ]);\n         }\n \n-        /* User not exist. Return invalid credentials. */\n         if (is_null($user))\n             return $this->sendError(__('login.invalid credentials'), 401);\n \n         return $this->sendResponse([\n"
                },
                {
                    "date": 1665562126284,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -38,11 +38,13 @@\n             /* Send Response with possible credentialTypes for user and with email. */\n             return $this->sendResponse([\n                 'credentialTypes' => $userResourceService->getCredentials($user),\n                 'email' => $request->email,\n+                'status' => LoginStatus::Verification->value,\n             ]);\n         }\n \n+        /* User not exist. Return invalid credentials. */\n         if (is_null($user))\n             return $this->sendError(__('login.invalid credentials'), 401);\n \n         return $this->sendResponse([\n"
                },
                {
                    "date": 1665562135473,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -28,28 +28,23 @@\n     public function login(LoginRequest $request, UserLoginService $userLoginService, UserResourceService $userResourceService, UserVerifyService $userVerifyService)\n     {\n         $user = $userResourceService->getWithEmail($request->email);\n \n-        if (!isset($request->password) && !isset($request->code)) {\n-            /* If user with request email exist, send them email with verifyCode */\n-            if (!is_null($user) && $user->canLoginWithCredentialType(CredentialType::VerifyCode))\n-                SendVerifyCode::dispatch($user);\n-\n-            /* User can be null! If user is null, he has to login with default CredentialType. */\n-            /* Send Response with possible credentialTypes for user and with email. */\n-            return $this->sendResponse([\n-                'credentialTypes' => $userResourceService->getCredentials($user),\n-                'email' => $request->email,\n-                'status' => LoginStatus::Verification->value,\n-            ]);\n-        }\n-\n         /* User not exist. Return invalid credentials. */\n         if (is_null($user))\n             return $this->sendError(__('login.invalid credentials'), 401);\n \n+        try {\n+            if (!$userVerifyService->verifyWithUserCredentials($request->validated(), $user)) {\n+                return $this->sendError(__('login.invalid credentials'), 401);\n+            }\n+        } catch (Exception $error) {\n+            return $this->sendError(__('login.invalid credentials'), 401);\n+        }\n+\n         return $this->sendResponse([\n             'access_token' => $userLoginService->createToken($user),\n             'token_type' => 'Bearer',\n+            'emailVerified' => $user->hasVerifiedEmail(),\n         ]);\n     }\n }\n"
                },
                {
                    "date": 1665562201890,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -24,9 +24,9 @@\n      *\n      * @return Response\n      *\n      */\n-    public function login(LoginRequest $request, UserLoginService $userLoginService, UserResourceService $userResourceService, UserVerifyService $userVerifyService)\n+    public function login(LoginRequest $request, UserLoginService $userLoginService, UserResourceService $userResourceService)\n     {\n         $user = $userResourceService->getWithEmail($request->email);\n \n         /* User not exist. Return invalid credentials. */\n"
                },
                {
                    "date": 1665562208131,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -24,9 +24,9 @@\n      *\n      * @return Response\n      *\n      */\n-    public function login(LoginRequest $request, UserLoginService $userLoginService, UserResourceService $userResourceService)\n+    public function login(LoginRequest $request, UserLoginService $userLoginService, UserResourceService $userResourceService, UserVerifyService $userVerifyService)\n     {\n         $user = $userResourceService->getWithEmail($request->email);\n \n         /* User not exist. Return invalid credentials. */\n"
                },
                {
                    "date": 1665562577199,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -26,8 +26,36 @@\n      *\n      */\n     public function login(LoginRequest $request, UserLoginService $userLoginService, UserResourceService $userResourceService, UserVerifyService $userVerifyService)\n     {\n+\n+    {\n+        try {\n+\n+            $request->validate([\n+                'email'     => 'email|required',\n+                'password'  => 'required',\n+            ]);\n+\n+            $credentials = $request->only('email', 'password');\n+\n+            if (!Auth::guard('user')->attempt($credentials)) {\n+\n+                return $this->sendError(__('login.invalid credentials'), 403);\n+            }\n+\n+            $user = Auth::guard('user')->user();\n+\n+            $tokenResult = $userLoginService->createToken($user);\n+\n+            return $this->sendResponse([\n+                'access_token' => $tokenResult,\n+                'token_type' => 'Bearer',\n+            ]);\n+        } catch (Exception $error) {\n+            return $this->sendError(__('login.invalid credentials'), 403);\n+        }\n+    }\n         $user = $userResourceService->getWithEmail($request->email);\n \n         /* User not exist. Return invalid credentials. */\n         if (is_null($user))\n"
                },
                {
                    "date": 1665562589778,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -27,15 +27,11 @@\n      */\n     public function login(LoginRequest $request, UserLoginService $userLoginService, UserResourceService $userResourceService, UserVerifyService $userVerifyService)\n     {\n \n-    {\n+    \n         try {\n \n-            $request->validate([\n-                'email'     => 'email|required',\n-                'password'  => 'required',\n-            ]);\n \n             $credentials = $request->only('email', 'password');\n \n             if (!Auth::guard('user')->attempt($credentials)) {\n@@ -53,9 +49,9 @@\n             ]);\n         } catch (Exception $error) {\n             return $this->sendError(__('login.invalid credentials'), 403);\n         }\n-    }\n+    \n         $user = $userResourceService->getWithEmail($request->email);\n \n         /* User not exist. Return invalid credentials. */\n         if (is_null($user))\n"
                },
                {
                    "date": 1665562659240,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -45,8 +45,11 @@\n \n             return $this->sendResponse([\n                 'access_token' => $tokenResult,\n                 'token_type' => 'Bearer',\n+                'access_token' => $userLoginService->createToken($user),\n+                'token_type' => 'Bearer',\n+                'emailVerified' => $user->hasVerifiedEmail(),\n             ]);\n         } catch (Exception $error) {\n             return $this->sendError(__('login.invalid credentials'), 403);\n         }\n"
                },
                {
                    "date": 1665562668790,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -43,10 +43,9 @@\n \n             $tokenResult = $userLoginService->createToken($user);\n \n             return $this->sendResponse([\n-                'access_token' => $tokenResult,\n-                'token_type' => 'Bearer',\n+\n                 'access_token' => $userLoginService->createToken($user),\n                 'token_type' => 'Bearer',\n                 'emailVerified' => $user->hasVerifiedEmail(),\n             ]);\n"
                },
                {
                    "date": 1665562685919,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -40,12 +40,10 @@\n             }\n \n             $user = Auth::guard('user')->user();\n \n-            $tokenResult = $userLoginService->createToken($user);\n \n             return $this->sendResponse([\n-\n                 'access_token' => $userLoginService->createToken($user),\n                 'token_type' => 'Bearer',\n                 'emailVerified' => $user->hasVerifiedEmail(),\n             ]);\n"
                },
                {
                    "date": 1665562700737,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -37,12 +37,12 @@\n             if (!Auth::guard('user')->attempt($credentials)) {\n \n                 return $this->sendError(__('login.invalid credentials'), 403);\n             }\n+            $user = $userResourceService->getWithEmail($request->email);\n \n             $user = Auth::guard('user')->user();\n \n-\n             return $this->sendResponse([\n                 'access_token' => $userLoginService->createToken($user),\n                 'token_type' => 'Bearer',\n                 'emailVerified' => $user->hasVerifiedEmail(),\n"
                },
                {
                    "date": 1665562718269,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -35,9 +35,8 @@\n             $credentials = $request->only('email', 'password');\n \n             if (is_null($user))\n             return $this->sendError(__('login.invalid credentials'), 401);\n-            $user = $userResourceService->getWithEmail($request->email);\n \n             $user = Auth::guard('user')->user();\n \n             return $this->sendResponse([\n"
                }
            ],
            "date": 1665561516464,
            "name": "Commit-0",
            "content": "<?php\n\nnamespace App\\Http\\Controllers\\Api\\v2\\User\\Login;\n\nuse App\\Enums\\User\\CredentialType;\nuse App\\Enums\\User\\LoginStatus;\nuse App\\Http\\Controllers\\Api\\v2\\BaseController;\nuse App\\Http\\Requests\\User\\Login\\LoginRequest as LoginLoginRequest;\nuse App\\Http\\Requests\\v2\\User\\Login\\LoginRequest;\nuse App\\Jobs\\User\\SendVerifyCode;\nuse App\\Services\\User\\UserLoginService;\nuse App\\Services\\User\\UserResourceService;\nuse App\\Services\\User\\UserVerifyService;\nuse Exception;\n\nclass UserLoginController extends BaseController\n{\n    /**\n     * Try login user to admin.\n     *\n     * @param LoginRequest $request\n     * @param UserLoginService $userLoginService\n     * @param UserResourceService $userResourceService\n     * @param UserVerifyService $userVerifyService\n     *\n     * @return Response\n     *\n     */\n    public function login(LoginLoginRequest $request, UserLoginService $userLoginService, UserResourceService $userResourceService, UserVerifyService $userVerifyService)\n    {\n        $user = $userResourceService->getWithEmail($request->email);\n\n        if (!isset($request->password) && !isset($request->code)) {\n            /* If user with request email exist, send them email with verifyCode */\n            if (!is_null($user) && $user->canLoginWithCredentialType(CredentialType::VerifyCode))\n                SendVerifyCode::dispatch($user);\n\n            /* User can be null! If user is null, he has to login with default CredentialType. */\n            /* Send Response with possible credentialTypes for user and with email. */\n            return $this->sendResponse([\n                'credentialTypes' => $userResourceService->getCredentials($user),\n                'email' => $request->email,\n                'status' => LoginStatus::Verification->value,\n            ]);\n        }\n\n        /* User not exist. Return invalid credentials. */\n        if (is_null($user))\n            return $this->sendError(__('login.invalid credentials'), 401);\n\n        try {\n            if (!$userVerifyService->verifyWithUserCredentials($request->validated(), $user)) {\n                return $this->sendError(__('login.invalid credentials'), 401);\n            }\n        } catch (Exception $error) {\n            return $this->sendError(__('login.invalid credentials'), 401);\n        }\n\n        return $this->sendResponse([\n            'access_token' => $userLoginService->createToken($user),\n            'token_type' => 'Bearer',\n            'emailVerified' => $user->hasVerifiedEmail(),\n            'status' => LoginStatus::Valid->value,\n        ]);\n    }\n}\n"
        }
    ]
}